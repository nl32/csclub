// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model HomeLinks {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  href      String
  text      String
  priority  Int
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String               @id @default(cuid())
  name          String?
  email         String?              @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  competitions  UserCompetitionMap[]
  role          Role?                @relation(fields: [roleId], references: [id])
  roleId        String?
  problems      MCProblem[]
}

model Competition {
  id        String               @id @default(cuid())
  name      String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  eventDate DateTime
  compLink  String
  Users     UserCompetitionMap[]
}

model UserCompetitionMap {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String

  @@id([userId, competitionId])
}

model Role {
  id          String       @id @default(cuid())
  title       String?
  slug        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  Users       User[]
  permissions Permission[]
}

model Permission {
  id          String   @id @default(cuid())
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  roles       Role[]
}

model MCProblem {
  id        Int      @id @default(autoincrement())
  name      String?
  content   Json
  code      Json?
  answers   Answer[]
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProblemTag {
  id   String @id @default(cuid())
  slug String @unique
  name String
}

model Answer {
  id        String    @id @default(cuid())
  content   Json
  correct   Boolean
  problemId Int
  problem   MCProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  createAt  DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
